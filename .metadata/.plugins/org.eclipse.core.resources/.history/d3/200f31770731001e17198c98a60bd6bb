package algorithm;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.StringTokenizer;

class Process implements Comparable<Process> {
	int p_id;
	int task;
	int enter_t;

	Process(int p_id, int task, int enter_t) {
		this.p_id = p_id;
		this.task = task;
		this.enter_t = enter_t;
	}

	@Override
	public int compareTo(Process o) {
		if (this.enter_t > o.enter_t) {
			return 1;
		} else if (this.enter_t < o.enter_t) {
			return -1;
		} else
			return 0;
	}
}

// N == 대기줄 손님 수
// T == 한번에 처리할수있는 처리량
// W == 은행의 운영시간
// M == 영업시작후 들어오는 손님수
// Px == 손님아이디
// tx == 손님의 업무량
// cx == 들어온 시간
public class BOJ22234 {
	static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	static StringTokenizer st;
	static ArrayList<Process> que = new ArrayList<Process>();

	public static void main(String[] args) throws IOException {

		st = new StringTokenizer(br.readLine());
		int N = Integer.parseInt(st.nextToken());
		int T = Integer.parseInt(st.nextToken());
		int W = Integer.parseInt(st.nextToken());
		// 은행 오픈전 들어오는 손님
		for (int i = 0; i < N; i++) {
			st = new StringTokenizer(br.readLine());
			int p_id = Integer.parseInt(st.nextToken());
			int task = Integer.parseInt(st.nextToken());
			que.add(new Process(p_id, task, 0));
		}

		st = new StringTokenizer(br.readLine());
		int M = Integer.parseInt(st.nextToken());
		// 은행 오픈 후 들어오는 손님
		for (int i = 0; i < M; i++) {
			st = new StringTokenizer(br.readLine());
			int p_id = Integer.parseInt(st.nextToken());
			int task = Integer.parseInt(st.nextToken());
			int enter_t = Integer.parseInt(st.nextToken());
			que.add(new Process(p_id, task, enter_t));
		}
		Collections.sort(que);
		
		for(Process p: que) {
			System.out.println("p_id: "+ p.p_id + " enter_t:" + p.enter_t);
		}
		
		// 은행 업무 시작!~
		for(int i )
	}
}
